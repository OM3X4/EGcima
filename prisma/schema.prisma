generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Actor {
  id             Int          @id @default(autoincrement())
  name           String
  profile_path   String?
  department     String?
  bio            String?
  birthday       DateTime?    @db.Date
  place_of_birth String?
  gender         Int?
  MovieActor     MovieActor[]
}

model CompanyMovie {
  id                Int                @id @default(autoincrement())
  movieId           Int?
  companyId         Int?
  ProductionCompany ProductionCompany? @relation(fields: [companyId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_company")
  Movie             Movie?             @relation(fields: [movieId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_movie")
}

model Genre {
  id         Int          @id @default(autoincrement())
  name       String?
  GenreMovie GenreMovie[]
}

model GenreMovie {
  id      Int    @id @default(autoincrement())
  genreId Int?
  movieId Int?
  Genre   Genre? @relation(fields: [genreId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_genre")
  Movie   Movie? @relation(fields: [movieId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_movie")
}

model Image {
  id      Int     @id @default(autoincrement())
  path    String?
  type    String?
  movieId Int?
  Movie   Movie?  @relation(fields: [movieId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_movie")
}

model Movie {
  id                  Int             @id
  title               String
  adult               Boolean?        @default(false)
  backdrop_path       String?
  budget              Int?
  homepage            String?
  original_language   String?
  original_title      String?
  origin_country      String?
  overview            String?
  popularity          Float?
  poster_path         String?
  release_date        DateTime?
  status              String?
  runtime             Int?
  revenue             Int?
  type                String?         @default("movie")
  vote_average        Float?          @default(0)
  video               String?
  revenue_last_update DateTime?       @db.Date
  episodes            Int?
  CompanyMovie        CompanyMovie[]
  GenreMovie          GenreMovie[]
  Image               Image[]
  MovieActor          MovieActor[]
  ProviderMovie       ProviderMovie[]
}

model MovieActor {
  id      Int     @id @default(autoincrement())
  name    String?
  movieId Int
  actorId Int
  order   Int?    @default(0)
  Actor   Actor   @relation(fields: [actorId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_actor")
  Movie   Movie   @relation(fields: [movieId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_movie")

  @@unique([movieId, actorId, name])
}

model Platform {
  id            Int             @id(map: "Platforms_pkey") @default(autoincrement())
  name          String?
  poster_path   String?
  ProviderMovie ProviderMovie[]
}

model ProductionCompany {
  id             Int            @id @default(autoincrement())
  poster_path    String?
  name           String?
  origin_country String?
  CompanyMovie   CompanyMovie[]
}

model ProviderMovie {
  id         Int       @id @default(autoincrement())
  movieId    Int?
  providerId Int?
  Movie      Movie?    @relation(fields: [movieId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_movie")
  Platform   Platform? @relation(fields: [providerId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_provider")
}
